/*
 * generated by Xtext 2.11.0
 */
package dk.deothan.math.ide.contentassist.antlr;

import com.google.inject.Inject;
import dk.deothan.math.ide.contentassist.antlr.internal.InternalMathParser;
import dk.deothan.math.services.MathGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MathParser extends AbstractContentAssistParser {

	@Inject
	private MathGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMathParser createParser() {
		InternalMathParser result = new InternalMathParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPrimitiveAccess().getAlternatives(), "rule__Primitive__Alternatives");
					put(grammarAccess.getPartOperatorAccess().getAlternatives(), "rule__PartOperator__Alternatives");
					put(grammarAccess.getFactorOperatorAccess().getAlternatives(), "rule__FactorOperator__Alternatives");
					put(grammarAccess.getNumberTypesAccess().getAlternatives(), "rule__NumberTypes__Alternatives");
					put(grammarAccess.getNamedExpressionAccess().getGroup(), "rule__NamedExpression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getFactorAccess().getGroup(), "rule__Factor__Group__0");
					put(grammarAccess.getFactorAccess().getGroup_1(), "rule__Factor__Group_1__0");
					put(grammarAccess.getPrimitiveAccess().getGroup_2(), "rule__Primitive__Group_2__0");
					put(grammarAccess.getNumberLiteralAccess().getGroup(), "rule__NumberLiteral__Group__0");
					put(grammarAccess.getDECIMALAccess().getGroup(), "rule__DECIMAL__Group__0");
					put(grammarAccess.getLetterAccess().getGroup(), "rule__Letter__Group__0");
					put(grammarAccess.getModelAccess().getExpsAssignment(), "rule__Model__ExpsAssignment");
					put(grammarAccess.getNamedExpressionAccess().getNameAssignment_1(), "rule__NamedExpression__NameAssignment_1");
					put(grammarAccess.getNamedExpressionAccess().getExpAssignment_3(), "rule__NamedExpression__ExpAssignment_3");
					put(grammarAccess.getExpressionAccess().getOperatorAssignment_1_1(), "rule__Expression__OperatorAssignment_1_1");
					put(grammarAccess.getExpressionAccess().getRightAssignment_1_2(), "rule__Expression__RightAssignment_1_2");
					put(grammarAccess.getFactorAccess().getOperatorAssignment_1_1(), "rule__Factor__OperatorAssignment_1_1");
					put(grammarAccess.getFactorAccess().getRightAssignment_1_2(), "rule__Factor__RightAssignment_1_2");
					put(grammarAccess.getNumberLiteralAccess().getOperatorAssignment_0(), "rule__NumberLiteral__OperatorAssignment_0");
					put(grammarAccess.getNumberLiteralAccess().getValueAssignment_1(), "rule__NumberLiteral__ValueAssignment_1");
					put(grammarAccess.getLetterAccess().getOperatorAssignment_0(), "rule__Letter__OperatorAssignment_0");
					put(grammarAccess.getLetterAccess().getValueAssignment_1(), "rule__Letter__ValueAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MathGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MathGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
