/*
 * generated by Xtext 2.11.0
 */
package dk.deothan.math.generator

import dk.deothan.math.math.Letter
import dk.deothan.math.math.Model
import dk.deothan.math.math.NamedExpression
import dk.deothan.math.math.NumberLiteral
import dk.deothan.math.math.Part
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dk.deothan.math.math.Factor

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		resource.allContents.filter(Model).next.generateProgram(fsa, resource)
	}
	
	def void generateProgram(Model model, IFileSystemAccess2 fsa, Resource resource){
		fsa.generateFile('math.dsl/mathCode.java', model.generateClass)
	}
	
	def CharSequence generateClass(Model model) '''
		package math.dsl;
		
		public class mathCode {
			«FOR exp:model.exps»
			«exp.generateNamedExp»
			«ENDFOR»
		}
	'''
	
	def generateNamedExp(NamedExpression expression) '''
		public static final int «expression.name» = «expression.exp.generateExp»
	'''
	
	def dispatch CharSequence generateExp(NumberLiteral num) '''«num.operator»«num.value»'''
	
	def dispatch CharSequence generateExp(Letter let) '''«let.operator»«let.value»'''
	
	def dispatch CharSequence generateExp(Part exp) '''(«exp.left.generateExp» «exp.operator» «exp.right.generateExp»)'''

	def dispatch CharSequence generateExp(Factor exp) '''(«exp.left.generateExp» «exp.operator» «exp.right.generateExp»)'''
}
