/*
 * generated by Xtext 2.11.0
 */
package dk.deothan.math.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MathGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.deothan.math.Math.Model");
		private final Assignment cExpsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpsNamedExpressionParserRuleCall_0 = (RuleCall)cExpsAssignment.eContents().get(0);
		
		//Model:
		//	exps+=NamedExpression*;
		@Override public ParserRule getRule() { return rule; }
		
		//exps+=NamedExpression*
		public Assignment getExpsAssignment() { return cExpsAssignment; }
		
		//NamedExpression
		public RuleCall getExpsNamedExpressionParserRuleCall_0() { return cExpsNamedExpressionParserRuleCall_0; }
	}
	public class NamedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.deothan.math.Math.NamedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		
		//NamedExpression:
		//	'Expression' name=ID ':' exp=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'Expression' name=ID ':' exp=Expression
		public Group getGroup() { return cGroup; }
		
		//'Expression'
		public Keyword getExpressionKeyword_0() { return cExpressionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//exp=Expression
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_3_0() { return cExpExpressionParserRuleCall_3_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.deothan.math.Math.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPartLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorPartOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightFactorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression:
		//	Factor ({Part.left=current} operator=PartOperator right=Factor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Factor ({Part.left=current} operator=PartOperator right=Factor)*
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//({Part.left=current} operator=PartOperator right=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Part.left=current}
		public Action getPartLeftAction_1_0() { return cPartLeftAction_1_0; }
		
		//operator=PartOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//PartOperator
		public RuleCall getOperatorPartOperatorParserRuleCall_1_1_0() { return cOperatorPartOperatorParserRuleCall_1_1_0; }
		
		//right=Factor
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Factor
		public RuleCall getRightFactorParserRuleCall_1_2_0() { return cRightFactorParserRuleCall_1_2_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.deothan.math.Math.Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimitiveParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFactorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorFactorOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimitiveParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Factor Expression:
		//	Primitive ({Factor.left=current} operator=FactorOperator right=Primitive)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primitive ({Factor.left=current} operator=FactorOperator right=Primitive)*
		public Group getGroup() { return cGroup; }
		
		//Primitive
		public RuleCall getPrimitiveParserRuleCall_0() { return cPrimitiveParserRuleCall_0; }
		
		//({Factor.left=current} operator=FactorOperator right=Primitive)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Factor.left=current}
		public Action getFactorLeftAction_1_0() { return cFactorLeftAction_1_0; }
		
		//operator=FactorOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//FactorOperator
		public RuleCall getOperatorFactorOperatorParserRuleCall_1_1_0() { return cOperatorFactorOperatorParserRuleCall_1_1_0; }
		
		//right=Primitive
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primitive
		public RuleCall getRightPrimitiveParserRuleCall_1_2_0() { return cRightPrimitiveParserRuleCall_1_2_0; }
	}
	public class PrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.deothan.math.Math.Primitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLetterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Primitive Expression:
		//	NumberLiteral | Letter | '(' Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//NumberLiteral | Letter | '(' Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_0() { return cNumberLiteralParserRuleCall_0; }
		
		//Letter
		public RuleCall getLetterParserRuleCall_1() { return cLetterParserRuleCall_1; }
		
		//'(' Expression ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2_1() { return cExpressionParserRuleCall_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class PartOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.deothan.math.Math.PartOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//PartOperator:
		//	'+' | '-';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class FactorOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.deothan.math.Math.FactorOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//FactorOperator:
		//	'*' | '/';
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | '/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
	}
	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.deothan.math.Math.NumberLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorPartOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueNumberTypesParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//NumberLiteral:
		//	operator=PartOperator?
		//	value=NumberTypes;
		@Override public ParserRule getRule() { return rule; }
		
		//operator=PartOperator? value=NumberTypes
		public Group getGroup() { return cGroup; }
		
		//operator=PartOperator?
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//PartOperator
		public RuleCall getOperatorPartOperatorParserRuleCall_0_0() { return cOperatorPartOperatorParserRuleCall_0_0; }
		
		//value=NumberTypes
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//NumberTypes
		public RuleCall getValueNumberTypesParserRuleCall_1_0() { return cValueNumberTypesParserRuleCall_1_0; }
	}
	public class DECIMALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.deothan.math.Math.DECIMAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DECIMAL:
		//	INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class NumberTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.deothan.math.Math.NumberTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDECIMALParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumberTypes:
		//	DECIMAL | INT;
		@Override public ParserRule getRule() { return rule; }
		
		//DECIMAL | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DECIMAL
		public RuleCall getDECIMALParserRuleCall_0() { return cDECIMALParserRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class LetterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.deothan.math.Math.Letter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorPartOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Letter:
		//	operator=PartOperator?
		//	value=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//operator=PartOperator? value=ID
		public Group getGroup() { return cGroup; }
		
		//operator=PartOperator?
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//PartOperator
		public RuleCall getOperatorPartOperatorParserRuleCall_0_0() { return cOperatorPartOperatorParserRuleCall_0_0; }
		
		//value=ID
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_1_0() { return cValueIDTerminalRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final NamedExpressionElements pNamedExpression;
	private final ExpressionElements pExpression;
	private final FactorElements pFactor;
	private final PrimitiveElements pPrimitive;
	private final PartOperatorElements pPartOperator;
	private final FactorOperatorElements pFactorOperator;
	private final NumberLiteralElements pNumberLiteral;
	private final DECIMALElements pDECIMAL;
	private final NumberTypesElements pNumberTypes;
	private final LetterElements pLetter;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MathGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pNamedExpression = new NamedExpressionElements();
		this.pExpression = new ExpressionElements();
		this.pFactor = new FactorElements();
		this.pPrimitive = new PrimitiveElements();
		this.pPartOperator = new PartOperatorElements();
		this.pFactorOperator = new FactorOperatorElements();
		this.pNumberLiteral = new NumberLiteralElements();
		this.pDECIMAL = new DECIMALElements();
		this.pNumberTypes = new NumberTypesElements();
		this.pLetter = new LetterElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.deothan.math.Math".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	exps+=NamedExpression*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//NamedExpression:
	//	'Expression' name=ID ':' exp=Expression;
	public NamedExpressionElements getNamedExpressionAccess() {
		return pNamedExpression;
	}
	
	public ParserRule getNamedExpressionRule() {
		return getNamedExpressionAccess().getRule();
	}
	
	//Expression:
	//	Factor ({Part.left=current} operator=PartOperator right=Factor)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Factor Expression:
	//	Primitive ({Factor.left=current} operator=FactorOperator right=Primitive)*;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//Primitive Expression:
	//	NumberLiteral | Letter | '(' Expression ')';
	public PrimitiveElements getPrimitiveAccess() {
		return pPrimitive;
	}
	
	public ParserRule getPrimitiveRule() {
		return getPrimitiveAccess().getRule();
	}
	
	//PartOperator:
	//	'+' | '-';
	public PartOperatorElements getPartOperatorAccess() {
		return pPartOperator;
	}
	
	public ParserRule getPartOperatorRule() {
		return getPartOperatorAccess().getRule();
	}
	
	//FactorOperator:
	//	'*' | '/';
	public FactorOperatorElements getFactorOperatorAccess() {
		return pFactorOperator;
	}
	
	public ParserRule getFactorOperatorRule() {
		return getFactorOperatorAccess().getRule();
	}
	
	//NumberLiteral:
	//	operator=PartOperator?
	//	value=NumberTypes;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}
	
	//DECIMAL:
	//	INT '.' INT;
	public DECIMALElements getDECIMALAccess() {
		return pDECIMAL;
	}
	
	public ParserRule getDECIMALRule() {
		return getDECIMALAccess().getRule();
	}
	
	//NumberTypes:
	//	DECIMAL | INT;
	public NumberTypesElements getNumberTypesAccess() {
		return pNumberTypes;
	}
	
	public ParserRule getNumberTypesRule() {
		return getNumberTypesAccess().getRule();
	}
	
	//Letter:
	//	operator=PartOperator?
	//	value=ID;
	public LetterElements getLetterAccess() {
		return pLetter;
	}
	
	public ParserRule getLetterRule() {
		return getLetterAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
