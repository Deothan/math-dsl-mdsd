/*
 * generated by Xtext 2.11.0
 */
package dk.deothan.math.serializer;

import com.google.inject.Inject;
import dk.deothan.math.math.Factor;
import dk.deothan.math.math.Letter;
import dk.deothan.math.math.MathPackage;
import dk.deothan.math.math.Model;
import dk.deothan.math.math.NamedExpression;
import dk.deothan.math.math.NumberLiteral;
import dk.deothan.math.math.Part;
import dk.deothan.math.services.MathGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MathSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MathGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MathPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MathPackage.FACTOR:
				sequence_Factor(context, (Factor) semanticObject); 
				return; 
			case MathPackage.LETTER:
				sequence_Letter(context, (Letter) semanticObject); 
				return; 
			case MathPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MathPackage.NAMED_EXPRESSION:
				sequence_NamedExpression(context, (NamedExpression) semanticObject); 
				return; 
			case MathPackage.NUMBER_LITERAL:
				sequence_NumberLiteral(context, (NumberLiteral) semanticObject); 
				return; 
			case MathPackage.PART:
				sequence_Expression(context, (Part) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Expression returns Part
	 *     Expression.Part_1_0 returns Part
	 *     Factor returns Part
	 *     Factor.Factor_1_0 returns Part
	 *     Primitive returns Part
	 *
	 * Constraint:
	 *     (left=Expression_Part_1_0 operator=PartOperator right=Factor)
	 */
	protected void sequence_Expression(ISerializationContext context, Part semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.PART__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.PART__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.PART__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.PART__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionAccess().getPartLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionAccess().getOperatorPartOperatorParserRuleCall_1_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getExpressionAccess().getRightFactorParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Factor
	 *     Expression.Part_1_0 returns Factor
	 *     Factor returns Factor
	 *     Factor.Factor_1_0 returns Factor
	 *     Primitive returns Factor
	 *
	 * Constraint:
	 *     (left=Factor_Factor_1_0 operator=FactorOperator right=Primitive)
	 */
	protected void sequence_Factor(ISerializationContext context, Factor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.FACTOR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.FACTOR__LEFT));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.FACTOR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.FACTOR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFactorAccess().getFactorLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getFactorAccess().getOperatorFactorOperatorParserRuleCall_1_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getFactorAccess().getRightPrimitiveParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Letter
	 *     Expression.Part_1_0 returns Letter
	 *     Factor returns Letter
	 *     Factor.Factor_1_0 returns Letter
	 *     Primitive returns Letter
	 *     Letter returns Letter
	 *
	 * Constraint:
	 *     (operator=PartOperator? value=ID)
	 */
	protected void sequence_Letter(ISerializationContext context, Letter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     exps+=NamedExpression+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NamedExpression returns NamedExpression
	 *
	 * Constraint:
	 *     (name=ID exp=Expression)
	 */
	protected void sequence_NamedExpression(ISerializationContext context, NamedExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.NAMED_EXPRESSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.NAMED_EXPRESSION__NAME));
			if (transientValues.isValueTransient(semanticObject, MathPackage.Literals.NAMED_EXPRESSION__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MathPackage.Literals.NAMED_EXPRESSION__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNamedExpressionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getNamedExpressionAccess().getExpExpressionParserRuleCall_3_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns NumberLiteral
	 *     Expression.Part_1_0 returns NumberLiteral
	 *     Factor returns NumberLiteral
	 *     Factor.Factor_1_0 returns NumberLiteral
	 *     Primitive returns NumberLiteral
	 *     NumberLiteral returns NumberLiteral
	 *
	 * Constraint:
	 *     (operator=PartOperator? value=NumberTypes)
	 */
	protected void sequence_NumberLiteral(ISerializationContext context, NumberLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
